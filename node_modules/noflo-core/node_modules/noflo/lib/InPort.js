(function() {
  var BasePort, InPort,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BasePort = require('./BasePort');

  InPort = (function(_super) {
    __extends(InPort, _super);

    function InPort(options, process) {
      this.process = null;
      if (!process && typeof options === 'function') {
        process = options;
        options = {};
      }
      if (options && options.buffered === void 0) {
        options.buffered = false;
      }
      if (!process && options && options.process) {
        process = options.process;
        delete options.process;
      }
      if (process) {
        if (typeof process !== 'function') {
          throw new Error('process must be a function');
        }
        this.process = process;
      }
      InPort.__super__.constructor.call(this, options);
      this.sendDefault();
      this.prepareBuffer();
    }

    InPort.prototype.attachSocket = function(socket, localId) {
      var _this = this;
      if (localId == null) {
        localId = null;
      }
      socket.on('connect', function() {
        return _this.handleSocketEvent('connect', socket, localId);
      });
      socket.on('begingroup', function(group) {
        return _this.handleSocketEvent('begingroup', group, localId);
      });
      socket.on('data', function(data) {
        _this.validateData(data);
        return _this.handleSocketEvent('data', data, localId);
      });
      socket.on('endgroup', function(group) {
        return _this.handleSocketEvent('endgroup', group, localId);
      });
      return socket.on('disconnect', function() {
        return _this.handleSocketEvent('disconnect', socket, localId);
      });
    };

    InPort.prototype.handleSocketEvent = function(event, payload, id) {
      if (this.isBuffered()) {
        this.buffer.push({
          event: event,
          payload: payload,
          id: id
        });
        if (this.isAddressable()) {
          if (this.process) {
            this.process(event, id, this.nodeInstance);
          }
          this.emit(event, id);
        } else {
          if (this.process) {
            this.process(event, this.nodeInstance);
          }
          this.emit(event);
        }
        return;
      }
      if (this.process) {
        if (this.isAddressable()) {
          this.process(event, payload, id, this.nodeInstance);
        } else {
          this.process(event, payload, this.nodeInstance);
        }
      }
      if (this.isAddressable()) {
        return this.emit(event, payload, id);
      }
      return this.emit(event, payload);
    };

    InPort.prototype.sendDefault = function() {
      var _this = this;
      if (this.options["default"] === void 0) {
        return;
      }
      return setTimeout(function() {
        var idx, socket, _i, _len, _ref, _results;
        _ref = _this.sockets;
        _results = [];
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          socket = _ref[idx];
          _results.push(_this.handleSocketEvent('data', _this.options["default"], idx));
        }
        return _results;
      }, 0);
    };

    InPort.prototype.prepareBuffer = function() {
      if (!this.isBuffered()) {
        return;
      }
      return this.buffer = [];
    };

    InPort.prototype.validateData = function(data) {
      if (!this.options.values) {
        return;
      }
      if (this.options.values.indexOf(data) === -1) {
        throw new Error('Invalid data received');
      }
    };

    InPort.prototype.receive = function() {
      if (!this.isBuffered()) {
        throw new Error('Receive is only possible on buffered ports');
      }
      return this.buffer.shift();
    };

    return InPort;

  })(BasePort);

  module.exports = InPort;

}).call(this);
