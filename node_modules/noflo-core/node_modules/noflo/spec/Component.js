var chai, component, socket;

if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
  if (!chai) {
    chai = require('chai');
  }
  component = require('../src/lib/Component.coffee');
  socket = require('../src/lib/InternalSocket.coffee');
} else {
  component = require('noflo/src/lib/Component.js');
  socket = require('noflo/src/lib/InternalSocket.js');
}

describe('Component', function() {
  describe('with required ports', function() {
    it('should throw an error upon sending packet to an unattached required port', function() {
      var c, s2;
      s2 = new socket.InternalSocket;
      c = new component.Component({
        outPorts: {
          requiredPort: {
            required: true
          },
          optionalPort: {}
        }
      });
      c.outPorts.optionalPort.attach(s2);
      return chai.expect(function() {
        return c.outPorts.requiredPorts.send('foo');
      }).to["throw"]();
    });
    return it('should be cool with an attached port', function() {
      var c, f, s1, s2;
      s1 = new socket.InternalSocket;
      s2 = new socket.InternalSocket;
      c = new component.Component({
        inPorts: {
          requiredPort: {
            required: true
          },
          optionalPort: {}
        }
      });
      c.inPorts.requiredPort.attach(s1);
      c.inPorts.optionalPort.attach(s2);
      f = function() {
        return s2.send('some-data');
      };
      return chai.expect(f).to.not["throw"]();
    });
  });
  return describe('with component creation shorthand', function() {
    return it('should make component creation easy', function(done) {
      var c, s1, s2;
      c = new component.Component({
        inPorts: {
          "in": {
            datatype: 'string',
            required: true,
            process: function(event, packet, component) {
              if (event !== 'data') {
                return;
              }
              chai.expect(packet).to.equal('some-data');
              return chai.expect(component).to.equal(c);
            }
          },
          justProcessor: function(event, packet, component) {
            if (event !== 'data') {
              return;
            }
            chai.expect(packet).to.equal('some-data');
            chai.expect(component).to.equal(c);
            return done();
          }
        }
      });
      s1 = new socket.InternalSocket;
      c.inPorts["in"].attach(s1);
      c.inPorts["in"].nodeInstance = c;
      s2 = new socket.InternalSocket;
      c.inPorts.justProcessor.attach(s1);
      c.inPorts.justProcessor.nodeInstance = c;
      s1.send('some-data');
      return s2.send('some-data');
    });
  });
});
