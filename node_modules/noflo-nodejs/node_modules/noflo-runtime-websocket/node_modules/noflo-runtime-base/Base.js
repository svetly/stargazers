(function() {
  var BaseTransport, protocols;

  protocols = {
    Graph: require('./protocol/Graph'),
    Network: require('./protocol/Network'),
    Component: require('./protocol/Component')
  };

  BaseTransport = (function() {
    function BaseTransport(options) {
      this.options = options;
      if (!this.options) {
        this.options = {};
      }
      this.graph = new protocols.Graph(this);
      this.network = new protocols.Network(this);
      this.component = new protocols.Component(this);
      this.context = null;
    }

    BaseTransport.prototype.send = function(protocol, topic, payload, context) {};

    BaseTransport.prototype.receive = function(protocol, topic, payload, context) {
      this.context = context;
      switch (protocol) {
        case 'graph':
          return this.graph.receive(topic, payload, context);
        case 'network':
          return this.network.receive(topic, payload, context);
        case 'component':
          return this.component.receive(topic, payload, context);
      }
    };

    return BaseTransport;

  })();

  module.exports = BaseTransport;

}).call(this);
