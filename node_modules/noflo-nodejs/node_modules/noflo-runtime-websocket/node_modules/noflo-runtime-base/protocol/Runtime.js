(function() {
  var RuntimeProtocol, noflo;

  noflo = require('noflo');

  RuntimeProtocol = (function() {
    function RuntimeProtocol(transport) {
      this.transport = transport;
    }

    RuntimeProtocol.prototype.send = function(topic, payload, context) {
      return this.transport.send('runtime', topic, payload, context);
    };

    RuntimeProtocol.prototype.receive = function(topic, payload, context) {
      switch (topic) {
        case 'getruntime':
          return this.getRuntime(payload, context);
        case 'packet':
          return this.receivePacket(payload, context);
      }
    };

    RuntimeProtocol.prototype.getRuntime = function(payload, context) {
      var type;
      type = this.transport.type;
      if (!type) {
        if (noflo.isBrowser()) {
          type = 'noflo-browser';
        } else {
          type = 'noflo-nodejs';
        }
      }
      return this.send('runtime', {
        type: type,
        version: this.transport.version,
        capabilities: ['protocol:graph', 'protocol:component', 'protocol:network', 'component:setsource', 'component:getsource']
      }, context);
    };

    RuntimeProtocol.prototype.receivePacket = function(payload, context) {
      return this.send('error', new Error('Packets not supported yet'), context);
    };

    return RuntimeProtocol;

  })();

  module.exports = RuntimeProtocol;

}).call(this);
