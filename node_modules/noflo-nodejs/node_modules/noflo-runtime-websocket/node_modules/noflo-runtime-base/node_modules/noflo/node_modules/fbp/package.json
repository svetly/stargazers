{
  "name": "fbp",
  "description": "Parser for the .fbp flow definition language",
  "version": "1.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/noflo/fbp.git"
  },
  "license": "MIT",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cafe-mocha": "~0.1.2",
    "chai": "~1.5.0",
    "mocha": "~1.9.0",
    "grunt-contrib-watch": "~0.3.1",
    "grunt-peg": "~0.1.0",
    "grunt-component-build": "~0.2.7",
    "grunt-mocha-phantomjs": "~0.2.8",
    "grunt-contrib-uglify": "~0.2.1",
    "grunt-contrib-coffee": "~0.7.0"
  },
  "keywords": [],
  "scripts": {
    "test": "grunt test"
  },
  "main": "./lib/fbp",
  "bin": {
    "fbp": "./bin/fbp"
  },
  "readme": "FBP flow definition language parser [![Build Status](https://travis-ci.org/noflo/fbp.png?branch=master)](https://travis-ci.org/noflo/fbp)\n===================================\n\nThe *fbp* library provides a parser for the [FBP domain-specific language](http://noflojs.org/documentation/fbp/) used for defining graphs for flowbased programming environments like [NoFlo](http://noflojs.org).  For more, see [the documentation on the NoFlo site](http://noflojs.org/documentation/fbp/).\n\n## Usage\n\nYou can use the FBP parser in your JavaScript code with the following:\n\n```javascript\nvar parser = require('fbp');\n\n// Some FBP syntax code\nvar fbpData = \"'hello, world!' -> IN Display(Output)\";\n\n// Parse into a Graph definition JSON object\nvar graphDefinition = parser.parse(fbpData);\n```\n\nAfter this the graph definition can be loaded into a compatible flow-based runtime environment like NoFlo.\n\n### Command-line\n\nThe *fbp* package also provides a command-line tool for converting FBP files into JSON:\n\n    $ fbp somefile.fbp > somefile.json\n\n## Language for Flow-Based Programming\n\nFBP is a Domain-Specific Language (DSL) for easy graph definition. The syntax is the following:\n\n* `'somedata' -> PORT Process(Component)` sends initial data _somedata_ to port _PORT_ of process _Process_ that runs component _Component_\n* `A(Component1) X -> Y B(Component2)` sets up a connection between port _X_ of process _A_ that runs component _Component1_ and port _Y_ of process _B_ that runs component _Component2_\n\nYou can connect multiple components and ports together on one line, and separate connection definitions with a newline or a comma (`,`). \n\nComponents only have to be specified the first time you mention a new process. Afterwards, simply append empty parentheses (`()`) after the process name.\n\nExample:\n\n```fbp\n'somefile.txt' -> SOURCE Read(ReadFile) OUT -> IN Split(SplitStr)\nSplit() OUT -> IN Count(Counter) COUNT -> IN Display(Output)\nRead() ERROR -> IN Display()\n```\n\nThe syntax also supports blank lines and comments. Comments start with the `#` character.\n\nExample with the same graph than above :\n\n```fbp\n# Read the content of \"somefile.txt\" and split it by line\n'somefile.txt' -> SOURCE Read(ReadFile) OUT -> IN Split(SplitStr)\n\n# Count the lines and display the result\nSplit() OUT -> IN Count(Counter) COUNT -> IN Display(Output)\n\n# The read errors are also displayed\nRead() ERROR -> IN Display()\n```\n\n### Exporting ports\n\nWhen FBP-defined graphs are used as subgraphs in other flows, it is often desirable to give more user-friendly names to their available ports. In the FBP language this is done by `INPORT` and `OUTPORT` statements.\n\nExample:\n\n```fbp\nINPORT=Read.IN:FILENAME\nRead(ReadFile) OUT -> IN Display(Output)\n```\n\nThis line would export the *IN* port of the *Read* node as *FILENAME*.\n\n### Node metadata\n\nIt is possible to append metadata to Nodes when declaring them by adding the metadata string to the Component part after a colon (`:`).\n\nExample:\n\n```fbp\n'somefile.txt' -> SOURCE Read(ReadFile:main)\nRead() OUT -> IN Split(SplitStr:main)\nSplit() OUT -> IN Count(Counter:main)\nCount() COUNT -> IN Display(Output:main)\nRead() ERROR -> IN Display()\n```\n\nIn this case the route leading from *Read* to *Display* through *Split* and *Count* would be identified with the string *main*.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/noflo/fbp/issues"
  },
  "homepage": "https://github.com/noflo/fbp",
  "_id": "fbp@1.1.1",
  "_from": "fbp@1.1.x"
}
