(function() {
  var LoggingComponent, Network, arrayport, asynccomponent, component, componentLoader, graph, internalSocket, port;

  internalSocket = require("./InternalSocket");

  component = require("./Component");

  componentLoader = require("./ComponentLoader");

  asynccomponent = require("./AsyncComponent");

  port = require("./Port");

  arrayport = require("./ArrayPort");

  graph = require("./Graph");

  Network = require("./Network").Network;

  LoggingComponent = require("./LoggingComponent").LoggingComponent;

  exports.createNetwork = function(graph, callback) {
    var network, networkReady, toAddNodes;
    network = new Network(graph);
    networkReady = function(network) {
      callback(network);
      return network.sendInitials();
    };
    toAddNodes = graph.nodes.length;
    if (toAddNodes === 0) {
      process.nextTick(function() {
        return networkReady(network);
      });
      return network;
    }
    network.loader.listComponents(function() {
      var connect, node, toAdd, _i, _len, _ref, _results;
      toAdd = graph.edges.length + graph.initializers.length;
      connect = function() {
        var edge, initializer, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (toAdd === 0) {
          return networkReady(network);
        }
        _ref = graph.edges;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          network.addEdge(edge, function() {
            toAdd--;
            if ((callback != null) && toAdd === 0) {
              return networkReady(network);
            }
          });
        }
        _ref1 = graph.initializers;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          initializer = _ref1[_j];
          _results.push(network.addInitial(initializer, function() {
            toAdd--;
            if ((callback != null) && toAdd === 0) {
              return networkReady(network);
            }
          }));
        }
        return _results;
      };
      _ref = graph.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push(network.addNode(node, function() {
          toAddNodes--;
          if (toAddNodes === 0) {
            return connect();
          }
        }));
      }
      return _results;
    });
    return network;
  };

  exports.loadFile = function(file, callback) {
    return graph.loadFile(file, function(net) {
      return exports.createNetwork(net, callback);
    });
  };

  exports.saveFile = function(graph, file, callback) {
    return graph.save(file, function() {
      return callback(file);
    });
  };

  exports.Component = component.Component;

  exports.ComponentLoader = componentLoader.ComponentLoader;

  exports.AsyncComponent = asynccomponent.AsyncComponent;

  exports.LoggingComponent = LoggingComponent;

  exports.Port = port.Port;

  exports.ArrayPort = arrayport.ArrayPort;

  exports.Graph = graph.Graph;

  exports.Network = Network;

  exports.graph = graph;

  exports.internalSocket = internalSocket;

}).call(this);
