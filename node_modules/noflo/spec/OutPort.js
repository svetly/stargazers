var chai, outport, socket;

if (!chai) {
  chai = require('chai');
}

if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
  outport = require('../src/lib/OutPort');
  socket = require('../src/lib/InternalSocket');
} else {
  outport = require('noflo/src/lib/OutPort.js');
  socket = require('noflo/src/lib/InternalSocket.js');
}

describe('Outport Port', function() {
  return describe('with addressable ports', function() {
    var s1, s2, s3;
    s1 = s2 = s3 = null;
    beforeEach(function() {
      s1 = new socket.InternalSocket;
      s2 = new socket.InternalSocket;
      return s3 = new socket.InternalSocket;
    });
    it('should be able to send to a specific port', function() {
      var p;
      p = new outport({
        addressable: true
      });
      p.attach(s1);
      p.attach(s2);
      p.attach(s3);
      s1.on('data', function() {
        return chai.expect(true).to.equal(false);
      });
      s2.on('data', function(data) {
        return chai.expect(data).to.equal('some-data');
      });
      s3.on('data', function() {
        return chai.expect(true).to.equal(false);
      });
      return p.send('some-data', 1);
    });
    it('should throw an error when sent data without address', function() {
      return chai.expect(function() {
        return p.send('some-data');
      }).to["throw"];
    });
    return it('should throw an error when a specific port is requested with non-addressable port', function() {
      var p;
      p = new outport;
      p.attach(s1);
      p.attach(s2);
      p.attach(s3);
      return chai.expect(function() {
        return p.send('some-data', 1);
      }).to["throw"];
    });
  });
});
